// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  // Add relationship to tenants they can access
  tenantAccess TenantAccess[]

  @@map("user")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  apiKey    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  access TenantAccess[]

  users TenantUser[]
  roles TenantRole[]

  @@map("tenants")
}

model TenantAccess {
  id       String @id @default(cuid())
  userId   String
  tenantId String
  role     String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("tenant_access")
}

model TenantRole {
  id          String   @id @default(cuid())
  name        String
  description String?
  tenantId    String
  createdAt   DateTime @default(now())

  tenant Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users  TenantUser[]

  @@unique([name, tenantId])
  @@map("tenant_roles")
}

model TenantUser {
  id        String   @id @default(cuid())
  email     String
  name      String?
  password  String?
  tenantId  String
  roleId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role   TenantRole? @relation(fields: [roleId], references: [id], onDelete: SetNull)

  @@unique([email, tenantId])
  @@map("tenant_users")
}
